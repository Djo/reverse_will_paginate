= An example of the reverse pagination with {will_paginate}[https://github.com/mislav/will_paginate]
{<img src="https://secure.travis-ci.org/Djo/reverse_will_paginate.png" />}[http://travis-ci.org/Djo/reverse_will_paginate]

The example shows how to implement pagination if you need unchanged pages with descending order.
To keep immutable content in the pages can be by SEO reasons for example. See {demo}[http://reverse-will-paginate.heroku.com/].

== How the pages will look

For example you should display 3 posts per page in the descending order. And you want to keep unchanged pages for google and friends for indexing.
In this case you can have the start page (the last page of the records in the your db) with dynamic limit:

9 Posts will provide the next three pages:

  9..7, 6..4, 3..1

10 Posts will provide the next three pages:

  10..7, 6..4, 3..1

11 Posts will provide the next three pages:

  11..7, 6..4, 3..1

And 10 Posts will provide the next four pages:

  12..10, 9..7, 6..4, 3..1

As you see you will always have unchanged pages expect the start page.

== How it works

I didn't find better solution with will_paginate than to convert a given relation to collection to set the right limit for the start page.
See {specs}[https://github.com/Djo/reverse_will_paginate/tree/master/spec/controllers/cities_controller_spec.rb/] and {demo}[http://reverse-will-paginate.heroku.com/].
